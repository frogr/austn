# Frontend Development Guidelines

## React Component Structure

- Use functional components with hooks
- Keep components focused on a single responsibility
- Use proper prop typing with PropTypes or TypeScript interfaces
- Follow naming convention: PascalCase for components, camelCase for functions/variables

## Styling Guidelines

- Use Tailwind CSS for styling components
- Prefer composition over inheritance
- Use consistent spacing (4px grid)
- Follow mobile-first responsive design
- Use semantic HTML elements when possible

## JavaScript/TypeScript Standards

- Use ES6+ features (arrow functions, destructuring, spread operators)
- Prefer const over let, avoid var
- Use async/await for asynchronous operations
- Limit line length to 100 characters
- Use 2 space indentation

## State Management

- Use React hooks (useState, useEffect, useContext) for local state
- Keep state as close to where it's used as possible
- Lift state up only when necessary
- Use context for global state that many components need access to

## Performance Considerations

- Use React.memo for pure functional components that render often
- Implement useCallback for functions passed as props
- Use useMemo for expensive calculations
- Avoid unnecessary re-renders by keeping component state minimal
- Implement code-splitting with React.lazy and Suspense

## Importing and Exporting

- Use named exports for utilities and helper functions
- Use default exports for main components
- Group imports by: React/libraries, components, utilities, styles
- Avoid wildcard imports

## Component File Organization

```
components/
  ├── Layout/
  │   ├── Sidebar.js
  │   ├── Header.js
  │   └── Footer.js
  ├── common/
  │   ├── Button.js
  │   ├── Card.js
  │   └── Input.js
  └── feature/
      ├── FeatureComponent.js
      └── FeatureHelpers.js
```

## Documentation Standards

- Document component props with JSDoc comments
- Include purpose, usage examples, and edge cases
- Document complex functions and algorithms

## Testing Guidelines

- Write unit tests for components and utilities
- Use React Testing Library for component tests
- Test user interactions and edge cases
- Aim for high test coverage on business-critical code

## Accessibility Standards

- Ensure proper semantic HTML structure
- Use appropriate ARIA attributes when necessary
- Maintain proper color contrast (WCAG AA compliance)
- Ensure keyboard navigation works properly
- Support screen readers with proper alt text and aria-labels